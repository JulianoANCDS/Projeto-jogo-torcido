#include <iostream>
#include <string>
#include <cstdlib>
#include <ctime>
#include <locale>
#include <windows.h>
#include <conio.h> // Para kbhit e getch
using namespace std;

// Estrutura da fila usando apontadores
struct Celula {
    string palavra;
    Celula* prox;
};

struct Fila {
    Celula* frente;
    Celula* tras;
};

// Estrutura do jogo
struct JogoTorcido {
    Fila palavrasEncontradas;
    string palavraOriginal;
    string palavraEmbaralhada;
    int pontuacao;
    int tempoLimite;
};

// Funções da fila
void FFVazia(Fila* fila) {
    fila->frente = new Celula();
    fila->frente->prox = nullptr;
    fila->tras = fila->frente;
}

bool FVazia(Fila* fila) {
    return (fila->frente == fila->tras);
}

void Enfileirar(Fila* fila, string palavra) {
    Celula* nova = new Celula();
    nova->palavra = palavra;
    nova->prox = nullptr;
    fila->tras->prox = nova;
    fila->tras = nova;
}

void Desenfileirar(Fila* fila, string& palavra) {
    if (FVazia(fila)) {
        cout << "Fila vazia\n";
        return;
    }

    Celula* aux = fila->frente->prox;
    palavra = aux->palavra;
    fila->frente->prox = aux->prox;

    if (aux == fila->tras) {
        fila->tras = fila->frente;
    }

    delete aux;
}

void LiberaFila(Fila* fila) {
    Celula* aux;
    while (fila->frente != fila->tras) {
        aux = fila->frente->prox;
        delete fila->frente;
        fila->frente = aux;
    }
    delete fila->frente;
}

// Funções do jogo
void inicializarJogo(JogoTorcido* jogo) {
    FFVazia(&jogo->palavrasEncontradas);
    jogo->pontuacao = 0;
    jogo->tempoLimite = 60;
}

void carregarDicionario(Fila* dicionario, const string& nomeArquivo) {
    FILE* arquivo = fopen(nomeArquivo.c_str(), "r");
    char palavra[50];

    if (!arquivo) {
        cout << "Erro ao abrir dicionário\n";
        return;
    }

    FFVazia(dicionario);

    while (fscanf(arquivo, "%s", palavra) == 1) {
        string strPalavra(palavra);
        if (strPalavra.length() >= 3 && strPalavra.length() <= 10) {
            for (char& c : strPalavra) c = toupper(c);
            Enfileirar(dicionario, strPalavra);
        }
    }

    fclose(arquivo);
}

void embaralharPalavra(const string& palavra, string& palavraEmbaralhada) {
    palavraEmbaralhada = palavra;
    srand(time(nullptr));
    for (int i = palavraEmbaralhada.length() - 1; i > 0; i--) {
        int j = rand() % (i + 1);
        swap(palavraEmbaralhada[i], palavraEmbaralhada[j]);
    }
}

void limparTela() {
    system("cls");
}

void exibirTelaAjuda() {
    limparTela();
    cout << "===== AJUDA - JOGO TORCIDO =====" << endl;
    cout << "Regras do Jogo:" << endl;
    cout << "1. O jogo seleciona aleatoriamente uma palavra do dicionário." << endl;
    cout << "2. As letras da palavra são embaralhadas." << endl;
    cout << "3. Seu objetivo é descobrir a palavra original." << endl;
    cout << endl;
    cout << "Como Jogar:" << endl;
    cout << "- Você tem 60 segundos para descobrir a palavra." << endl;
    cout << "- Digite a palavra que acha ser a original." << endl;
    cout << "- Cada palavra correta vale 100 pontos." << endl;
    cout << "- Palavras devem ter entre 3 e 10 letras." << endl;
    cout << endl;
    cout << "Pressione ENTER para voltar...";
    cin.ignore();
    cin.get();
}

void salvarJogadorArquivo(const string& nomeJogador) {
    FILE* arquivo = fopen("jogadores.txt", "a");
    if (arquivo == nullptr) {
        cout << "Erro ao abrir o arquivo.\n";
        return;
    }
    fprintf(arquivo, "%s\n", nomeJogador.c_str());
    fclose(arquivo);
}

void mostrarListaJogadores() {
    FILE* arquivo = fopen("jogadores.txt", "r");
    if (arquivo == nullptr) {
        cout << "Erro ao abrir o arquivo.\n";
        return;
    }

    char nomeJogador[100];
    cout << "Lista de jogadores:" << endl;
    while (fgets(nomeJogador, sizeof(nomeJogador), arquivo) != nullptr) {
        cout << nomeJogador;
    }
    fclose(arquivo);

    cout << "\nPressione qualquer tecla para voltar...";
    _getch();
}

void Nomedojogo() {
    setlocale(LC_ALL, "portuguese");
    limparTela();

    cout << "===== JOGO TORCIDO =====" << endl;
    cout << "Bem-vindo ao Jogo Torcido!" << endl;
    cout << "Desembaralhe as palavras e ganhe pontos!" << endl;
    cout << "Pressione ENTER para começar...";
    cin.ignore();
    cin.get();
}

int jogarJogoTorcido(JogoTorcido* jogo, const string& nomeJogador, const string& nomeArquivo) {
    Fila dicionario;
    string tentativa;
    time_t inicioTempo, tempoAtual;

    carregarDicionario(&dicionario, nomeArquivo);

    Celula* palavraAtual = dicionario.frente->prox;
    int total = 0;
    while (palavraAtual != nullptr) {
        total++;
        palavraAtual = palavraAtual->prox;
    }

    int escolha = rand() % total;
    palavraAtual = dicionario.frente->prox;
    for (int i = 0; i < escolha; i++) {
        palavraAtual = palavraAtual->prox;
    }

    jogo->palavraOriginal = palavraAtual->palavra;
    embaralharPalavra(jogo->palavraOriginal, jogo->palavraEmbaralhada);

    time(&inicioTempo);
    int tempoRestante;

    do {
        limparTela();
        cout << "===== JOGO TORCIDO =====" << endl;
        cout << "Palavra Embaralhada: " << jogo->palavraEmbaralhada << endl;

        time(&tempoAtual);
        tempoRestante = jogo->tempoLimite - difftime(tempoAtual, inicioTempo);

        if (tempoRestante <= 0) {
            cout << "Tempo esgotado! A palavra era: " << jogo->palavraOriginal << endl;
            cout << "Você perdeu!" << endl;
            return 0;
        }

        cout << "Tempo Restante: " << tempoRestante << " segundos" << endl;
        cout << "Pontuação: " << jogo->pontuacao << endl;
        cout << "Digite sua tentativa (ou SAIR): ";

        // Verifica se uma tecla foi pressionada
        if (_kbhit()) {
            cin >> tentativa;
            for (char& c : tentativa) c = toupper(c);

            if (tentativa == "SAIR") {
                return 0;
            }

            if (tentativa == jogo->palavraOriginal) {
                jogo->pontuacao += 100;
                cout << "PARABÉNS! Você descobriu a palavra!" << endl;
                salvarJogadorArquivo(nomeJogador);
                Sleep(2000);
                return 1;
            } else {
                cout << "Você errou! Tente novamente." << endl;
                Sleep(1000);
            }
        }

        Sleep(100); // Pausa para evitar uso excessivo da CPU
    } while (tempoRestante > 0);

    return 0;
}

int main() {
    setlocale(LC_ALL, "portuguese");
    int opcao;
    string nomeJogador;
    JogoTorcido jogo;
    string nomeArquivo;
    int jogarNovamente;

    cout << "Bem-vindo ao Jogo Torcido!" << endl;
    cout << "Informe seu nome: ";
    getline(cin, nomeJogador);

    do {
        Nomedojogo();
        limparTela();

        cout << "===== MENU PRINCIPAL =====" << endl;
        cout << "1. Jogar em Português" << endl;
        cout << "2. Jogar em Inglês" << endl;
        cout << "3. Ajuda" << endl;
        cout << "4. Lista de Jogadores" << endl;
        cout << "0. Sair" << endl;
        cout << "Escolha uma opção: ";
        cin >> opcao;
        cin.ignore();

        if (opcao == 1 || opcao == 2) {
            nomeArquivo = (opcao == 1) ? "portugues.txt" : "ingles.txt";
            do {
                inicializarJogo(&jogo);
                int resultado = jogarJogoTorcido(&jogo, nomeJogador, nomeArquivo);

                if (resultado == 1) {
                    cout << "Você ganhou! Pontuação: " << jogo.pontuacao << endl;
                } else {
                    cout << "Você perdeu! Pontuação: " << jogo.pontuacao << endl;
                }

                cout << "Deseja jogar novamente? (1 - Sim / 0 - Não): ";
                cin >> jogarNovamente;
                cin.ignore();
            } while (jogarNovamente == 1);
        } else if (opcao == 3) {
            exibirTelaAjuda();
        } else if (opcao == 4) {
            mostrarListaJogadores();
        } else if (opcao == 0) {
            cout << "Obrigado por jogar!" << endl;
            return 0;
        } else {
            cout << "Opção inválida!" << endl;
            Sleep(1000);
        }
    } while (true);

    return 0;
}

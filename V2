#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <locale.h>
#include <windows.h>
#include <ctype.h>
#include <conio.h>
#include "gconio.h" // Certifique-se de que a biblioteca gconio.h está disponível

typedef struct Celula {
    char palavra[50];
    struct Celula* prox;
} TCelula;

typedef struct {
    TCelula* frente;
    TCelula* tras;
} TFila;

typedef struct {
    TFila palavrasEncontradas;
    char palavraOriginal[50];
    char palavraEmbaralhada[50];
    int pontuacao;
    int tempoLimite;
} JogoTorcido;

// Cores
int COR_FUNDO = BLACK;
int COR_LETRA = GREEN;

// Funções de interface gráfica
void limparTela();
void limparBufferEntrada();
void Nomedojogo();
void exibirTelaAjuda();
void mostrarListaJogadores();
void salvarJogadorArquivo(const char* nomeJogador);
void embaralharPalavra(char* palavra, char* palavraEmbaralhada);
void carregarDicionario(TFila* dicionario, const char* nomeArquivo);
void inicializarJogo(JogoTorcido* jogo);
int jogarJogoTorcido(JogoTorcido* jogo, const char* nomeJogador, const char* nomeArquivo);

// Funções de fila
void FFVazia(TFila* fila) {
    fila->frente = (TCelula*)malloc(sizeof(TCelula));
    fila->frente->prox = NULL;
    fila->tras = fila->frente;
}

int FVazia(TFila* fila) {
    return (fila->frente == fila->tras);
}

void Enfileirar(TFila* fila, char* palavra) {
    TCelula* nova = (TCelula*)malloc(sizeof(TCelula));
    strcpy(nova->palavra, palavra);
    nova->prox = NULL;
    fila->tras->prox = nova;
    fila->tras = nova;
}

void Desenfileirar(TFila* fila, char* palavra) {
    if (FVazia(fila)) {
        printf("Fila vazia\n");
        return;
    }

    TCelula* aux = fila->frente->prox;
    strcpy(palavra, aux->palavra);
    fila->frente->prox = aux->prox;

    if (aux == fila->tras) {
        fila->tras = fila->frente;
    }

    free(aux);
}

void LiberaFila(TFila* fila) {
    TCelula* aux;
    while (fila->frente != fila->tras) {
        aux = fila->frente->prox;
        free(fila->frente);
        fila->frente = aux;
    }
    free(fila->frente);
}

// Funções do jogo
void inicializarJogo(JogoTorcido* jogo) {
    FFVazia(&jogo->palavrasEncontradas);
    jogo->pontuacao = 0;
    jogo->tempoLimite = 60;
}

void carregarDicionario(TFila* dicionario, const char* nomeArquivo) {
    FILE* arquivo = fopen(nomeArquivo, "r");
    char palavra[50];

    if (!arquivo) {
        printf("Erro ao abrir dicionário\n");
        return;
    }

    FFVazia(dicionario);

    while (fscanf(arquivo, "%s", palavra) == 1) {
        if (strlen(palavra) >= 3 && strlen(palavra) <= 10) {
            strupr(palavra);
            Enfileirar(dicionario, palavra);
        }
    }

    fclose(arquivo);
}

void embaralharPalavra(char* palavra, char* palavraEmbaralhada) {
    int tamanho = strlen(palavra);
    strcpy(palavraEmbaralhada, palavra);

    srand(time(NULL));
    for (int i = tamanho - 1; i > 0; i--) {
        int j = rand() % (i + 1);
        char temp = palavraEmbaralhada[i];
        palavraEmbaralhada[i] = palavraEmbaralhada[j];
        palavraEmbaralhada[j] = temp;
    }
}

void limparTela() {
    system("cls");
}

void exibirTelaAjuda() {
    limparTela();
    textcolor(COR_LETRA);
    gotoxy(35, 5);
    printf("===== AJUDA - JOGO TORCIDO =====");
    gotoxy(35, 7);
    printf("Regras do Jogo:");
    gotoxy(35, 8);
    printf("1. O jogo seleciona aleatoriamente uma palavra do dicionário.");
    gotoxy(35, 9);
    printf("2. As letras da palavra são embaralhadas.");
    gotoxy(35, 10);
    printf("3. Seu objetivo é descobrir a palavra original.");
    gotoxy(35, 12);
    printf("Como Jogar:");
    gotoxy(35, 13);
    printf("- Você tem 60 segundos para descobrir a palavra.");
    gotoxy(35, 14);
    printf("- Digite a palavra que acha ser a original.");
    gotoxy(35, 15);
    printf("- Cada palavra correta vale 100 pontos.");
    gotoxy(35, 16);
    printf("- Palavras devem ter entre 3 e 10 letras.");
    gotoxy(35, 18);
    printf("Pressione ENTER para voltar...");
    getchar();
}

void salvarJogadorArquivo(const char* nomeJogador) {
    FILE* arquivo = fopen("jogadores.txt", "a");
    if (arquivo == NULL) {
        printf("Erro ao abrir o arquivo.\n");
        return;
    }
    fprintf(arquivo, "%s\n", nomeJogador);
    fclose(arquivo);
}

void mostrarListaJogadores() {
    FILE* arquivo = fopen("jogadores.txt", "r");
    if (arquivo == NULL) {
        printf("Erro ao abrir o arquivo.\n");
        return;
    }

    char nomeJogador[100];
    gotoxy(35, 5);
    printf("Lista de jogadores:");
    int linha = 7;
    while (fgets(nomeJogador, sizeof(nomeJogador), arquivo) != NULL) {
        nomeJogador[strcspn(nomeJogador, "\n")] = '\0';
        gotoxy(35, linha++);
        printf("%s", nomeJogador);
    }
    fclose(arquivo);

    gotoxy(35, linha + 1);
    printf("Pressione qualquer tecla para voltar...");
    getch();
}

void Nomedojogo() {
    setlocale(LC_ALL, "portuguese");
    textbackground(COR_FUNDO);
    textcolor(COR_LETRA);
    limparTela();

    gotoxy(35, 5);
    printf("===== JOGO TORCIDO =====");
    gotoxy(35, 7);
    printf("Bem-vindo ao Jogo Torcido!");
    gotoxy(35, 9);
    printf("Desembaralhe as palavras e ganhe pontos!");
    gotoxy(35, 11);
    printf("Pressione ENTER para começar...");
    getchar();
}

void limparBufferEntrada() {
    int c;
    while ((c = getchar()) != '\n' && c != EOF) {}
}

int jogarJogoTorcido(JogoTorcido* jogo, const char* nomeJogador, const char* nomeArquivo) {
    TFila dicionario;
    char tentativa[50];
    time_t inicioTempo, tempoAtual;

    carregarDicionario(&dicionario, nomeArquivo);

    TCelula* palavraAtual = dicionario.frente->prox;
    int total = 0;
    while (palavraAtual != NULL) {
        total++;
        palavraAtual = palavraAtual->prox;
    }

    int escolha = rand() % total;
    palavraAtual = dicionario.frente->prox;
    for (int i = 0; i < escolha; i++) {
        palavraAtual = palavraAtual->prox;
    }

    strcpy(jogo->palavraOriginal, palavraAtual->palavra);
    embaralharPalavra(jogo->palavraOriginal, jogo->palavraEmbaralhada);

    time(&inicioTempo);
    int tempoRestante;

    do {
        limparTela();
        textcolor(COR_LETRA);
        gotoxy(35, 5);
        printf("===== JOGO TORCIDO =====");
        gotoxy(35, 7);
        printf("Palavra Embaralhada: %s", jogo->palavraEmbaralhada);

        time(&tempoAtual);
        tempoRestante = jogo->tempoLimite - difftime(tempoAtual, inicioTempo);

        if (tempoRestante <= 0) {
            gotoxy(35, 9);
            printf("Tempo esgotado! A palavra era: %s", jogo->palavraOriginal);
            gotoxy(35, 11);
            printf("Você perdeu!");
            return 0;
        }

        gotoxy(35, 9);
        printf("Tempo Restante: %d segundos", tempoRestante);
        gotoxy(35, 11);
        printf("Pontuação: %d", jogo->pontuacao);

        gotoxy(35, 13);
        printf("Digite sua tentativa (ou SAIR): ");

        // Verifica se uma tecla foi pressionada
        if (kbhit()) {
            scanf("%s", tentativa);
            strupr(tentativa);

            if (strcmp(tentativa, "SAIR") == 0) {
                return 0;
            }

            if (strcmp(tentativa, jogo->palavraOriginal) == 0) {
                jogo->pontuacao += 100;
                gotoxy(35, 15);
                printf("PARABÉNS! Você descobriu a palavra!");
                salvarJogadorArquivo(nomeJogador);
                Sleep(2000);
                return 1;
            } else {
                gotoxy(35, 15);
                printf("Você errou! Tente novamente.");
                Sleep(1000);
            }
        }

        Sleep(100); // Pausa para evitar uso excessivo da CPU
    } while (tempoRestante > 0);

    return 0;
}

int main() {
    setlocale(LC_ALL, "portuguese");
    int opcao;
    char nomeJogador[100];
    JogoTorcido jogo;
    char nomeArquivo[50];
    int jogarNovamente;

    printf("Bem-vindo ao Jogo Torcido!\n");
    printf("Informe seu nome: ");
    fgets(nomeJogador, sizeof(nomeJogador), stdin);
    nomeJogador[strcspn(nomeJogador, "\n")] = '\0';

    do {
        Nomedojogo();
        limparTela();

        gotoxy(35, 5);
        printf("===== MENU PRINCIPAL =====");
        gotoxy(35, 7);
        printf("1. Jogar em Português");
        gotoxy(35, 8);
        printf("2. Jogar em Inglês");
        gotoxy(35, 9);
        printf("3. Ajuda");
        gotoxy(35, 10);
        printf("4. Lista de Jogadores");
        gotoxy(35, 11);
        printf("0. Sair");
        gotoxy(35, 13);
        printf("Escolha uma opção: ");
        scanf("%d", &opcao);
        limparBufferEntrada();

        if (opcao == 1 || opcao == 2) {
            strcpy(nomeArquivo, (opcao == 1) ? "portugues.txt" : "ingles.txt");
            do {
                inicializarJogo(&jogo);
                int resultado = jogarJogoTorcido(&jogo, nomeJogador, nomeArquivo);

                if (resultado == 1) {
                    gotoxy(35, 17);
                    printf("Você ganhou! Pontuação: %d", jogo.pontuacao);
                } else {
                    gotoxy(35, 17);
                    printf("Você perdeu! Pontuação: %d", jogo.pontuacao);
                }

                gotoxy(35, 19);
                printf("Deseja jogar novamente? (1 - Sim / 0 - Não): ");
                scanf("%d", &jogarNovamente);
                limparBufferEntrada();
            } while (jogarNovamente == 1);
        } else if (opcao == 3) {
            exibirTelaAjuda();
        } else if (opcao == 4) {
            mostrarListaJogadores();
        } else if (opcao == 0) {
            printf("Obrigado por jogar!\n");
            return 0;
        } else {
            printf("Opção inválida!\n");
            Sleep(1000);
        }
    } while (1);

    return 0;
}

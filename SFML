#include <SFML/Graphics.hpp>
#include <iostream>
#include <string>
#include <cstdlib>
#include <ctime>
#include <vector>
#include <algorithm>
#include <fstream>
#include <sstream>
#include <chrono>

// Estrutura da fila usando apontadores
struct Celula {
    std::string palavra;
    Celula* prox;
};

struct Fila {
    Celula* frente;
    Celula* tras;
};

// Funções da fila
void FFVazia(Fila* fila) {
    fila->frente = new Celula;
    fila->frente->prox = nullptr;
    fila->tras = fila->frente;
}

bool FVazia(Fila* fila) {
    return (fila->frente == fila->tras);
}

void Enfileirar(Fila* fila, std::string palavra) {
    Celula* nova = new Celula;
    nova->palavra = palavra;
    nova->prox = nullptr;
    fila->tras->prox = nova;
    fila->tras = nova;
}

void Desenfileirar(Fila* fila, std::string& palavra) {
    if (FVazia(fila)) {
        std::cout << "Fila vazia\n";
        return;
    }

    Celula* aux = fila->frente->prox;
    palavra = aux->palavra;
    fila->frente->prox = aux->prox;

    if (aux == fila->tras) {
        fila->tras = fila->frente;
    }

    delete aux;
}

void LiberaFila(Fila* fila) {
    Celula* aux;
    while (fila->frente != fila->tras) {
        aux = fila->frente->prox;
        delete fila->frente;
        fila->frente = aux;
    }
    delete fila->frente;
}

class Button {
private:
    sf::RectangleShape shape;
    sf::Text text;
    std::string buttonText;
    bool isHovered;

public:
    Button(float x, float y, float width, float height, const std::string& text, const sf::Font& font) {
        shape.setPosition(x, y);
        shape.setSize(sf::Vector2f(width, height));
        shape.setFillColor(sf::Color(100, 100, 100));
        shape.setOutlineThickness(2);
        shape.setOutlineColor(sf::Color::White);

        this->text.setFont(font);
        this->text.setString(text);
        this->text.setCharacterSize(24);
        this->text.setFillColor(sf::Color::White);
        this->buttonText = text;

        // Centralizar texto
        this->text.setPosition(
            x + (width - this->text.getGlobalBounds().width) / 2.0f,
            y + (height - this->text.getGlobalBounds().height) / 2.0f
        );

        isHovered = false;
    }

    void setHovered(bool hovered) {
        isHovered = hovered;
        if (hovered) {
            shape.setFillColor(sf::Color(150, 150, 150));
        } else {
            shape.setFillColor(sf::Color(100, 100, 100));
        }
    }

    bool contains(sf::Vector2f point) const {
        return shape.getGlobalBounds().contains(point);
    }

    void draw(sf::RenderWindow& window) {
        window.draw(shape);
        window.draw(text);
    }

    const std::string& getText() const { return buttonText; }
};

class Player {
public:
    std::string name;
    int score;

    Player(const std::string& n = "", int s = 0) : name(n), score(s) {}
};

class TwistedGame {
private:
    sf::RenderWindow window;
    sf::Font font;
    std::vector<Button> menuButtons;
    Fila dicionario;
    std::string currentWord;
    std::string scrambledWord;
    std::string playerInput;
    int score;
    float timeRemaining;
    Player currentPlayer;
    std::vector<Player> leaderboard;
    sf::Clock feedbackTimer;
    std::string feedbackMessage;
    bool showFeedback;

    enum GameState {
        MENU,
        PLAYING,
        HELP,
        LEADERBOARD,
        GAME_OVER
    } currentState;

    sf::Text inputText;
    sf::Text scoreText;
    sf::Text timeText;
    sf::Text scrambledWordText;
    sf::Text escapeText;
    sf::Text feedbackText;
    sf::RectangleShape timeBar;

    void loadDictionary(const std::string& filename) {
        std::ifstream file(filename);
        std::string word;

        FFVazia(&dicionario);

        while (file >> word) {
            if (word.length() >= 3 && word.length() <= 10) {
                std::transform(word.begin(), word.end(), word.begin(), ::toupper);
                Enfileirar(&dicionario, word);
            }
        }
    }

    void scrambleWord() {
        if (FVazia(&dicionario)) return;

        // Contar palavras na fila
        Celula* temp = dicionario.frente->prox;
        int total = 0;
        while (temp != nullptr) {
            total++;
            temp = temp->prox;
        }

        // Escolher palavra aleatória
        int escolha = rand() % total;
        temp = dicionario.frente->prox;
        for (int i = 0; i < escolha; i++) {
            temp = temp->prox;
        }

        currentWord = temp->palavra;
        scrambledWord = currentWord;
        do {
            std::random_shuffle(scrambledWord.begin(), scrambledWord.end());
        } while (scrambledWord == currentWord);
    }

    void saveScore() {
        std::ofstream file("jogadores.txt", std::ios::app);
        file << currentPlayer.name << " " << score << std::endl;
    }

    void loadLeaderboard() {
        leaderboard.clear();
        std::ifstream file("jogadores.txt");
        std::string name;
        int score;
        while (file >> name >> score) {
            leaderboard.push_back(Player(name, score));
        }
        std::sort(leaderboard.begin(), leaderboard.end(),
                 [](const Player& a, const Player& b) { return a.score > b.score; });
    }

    void showFeedbackMessage(const std::string& message, const sf::Color& color) {
        feedbackMessage = message;
        feedbackText.setFillColor(color);
        showFeedback = true;
        feedbackTimer.restart();
    }

public:
    TwistedGame() : window(sf::VideoMode(800, 600), "Jogo Torcido"),
                    score(0), timeRemaining(60.f), currentState(MENU), showFeedback(false) {
        if (!font.loadFromFile("C:/arial.ttf")) {
            std::cout << "Erro ao carregar fonte\n";
            return;
        }

        // Inicializar botões do menu
        menuButtons.push_back(Button(300, 200, 200, 50, "Portugues", font));
        menuButtons.push_back(Button(300, 270, 200, 50, "Ingles", font));
        menuButtons.push_back(Button(300, 340, 200, 50, "Ajuda", font));
        menuButtons.push_back(Button(300, 410, 200, 50, "Placar", font));
        menuButtons.push_back(Button(300, 480, 200, 50, "Sair", font));

        // Inicializar elementos de texto do jogo
        inputText.setFont(font);
        inputText.setCharacterSize(24);
        inputText.setFillColor(sf::Color::White);
        inputText.setPosition(300, 300);

        scoreText.setFont(font);
        scoreText.setCharacterSize(24);
        scoreText.setFillColor(sf::Color::White);
        scoreText.setPosition(10, 10);

        timeText.setFont(font);
        timeText.setCharacterSize(24);
        timeText.setFillColor(sf::Color::White);
        timeText.setPosition(10, 40);

        scrambledWordText.setFont(font);
        scrambledWordText.setCharacterSize(32);
        scrambledWordText.setFillColor(sf::Color::Yellow);
        scrambledWordText.setPosition(300, 200);

        escapeText.setFont(font);
        escapeText.setCharacterSize(20);
        escapeText.setFillColor(sf::Color::White);
        escapeText.setString("Pressione ESC para voltar ao menu");
        escapeText.setPosition(10, 550);

        feedbackText.setFont(font);
        feedbackText.setCharacterSize(24);
        feedbackText.setPosition(300, 400);

        timeBar.setSize(sf::Vector2f(700, 20));
        timeBar.setPosition(50, 70);
        timeBar.setFillColor(sf::Color::Green);

        FFVazia(&dicionario);
        srand(time(nullptr));
    }

    ~TwistedGame() {
        LiberaFila(&dicionario);
    }

    void run() {
        std::cout << "Digite seu nome: ";
        std::getline(std::cin, currentPlayer.name);

        sf::Clock clock;
        while (window.isOpen()) {
            float dt = clock.restart().asSeconds();

            sf::Event event;
            while (window.pollEvent(event)) {
                handleEvent(event);
            }

            update(dt);
            render();
        }
    }

private:
    void handleEvent(const sf::Event& event) {
        if (event.type == sf::Event::Closed) {
            window.close();
        }

        if (event.type == sf::Event::MouseMoved) {
            sf::Vector2f mousePos(event.mouseMove.x, event.mouseMove.y);
            for (auto& button : menuButtons) {
                button.setHovered(button.contains(mousePos));
            }
        }

        if (event.type == sf::Event::MouseButtonPressed) {
            if (event.mouseButton.button == sf::Mouse::Left) {
                handleMouseClick(sf::Vector2f(event.mouseButton.x, event.mouseButton.y));
            }
        }

        if (currentState == PLAYING && event.type == sf::Event::TextEntered) {
            handleTextInput(event);
        }

        if (event.type == sf::Event::KeyPressed) {
            if (event.key.code == sf::Keyboard::Escape) {
                if (currentState == PLAYING) {
                    currentState = MENU;
                    saveScore();
                } else if (currentState == HELP || currentState == LEADERBOARD || currentState == GAME_OVER) {
                    currentState = MENU;
                }
            }
        }
    }

    void handleMouseClick(sf::Vector2f mousePos) {
        if (currentState == MENU) {
            for (size_t i = 0; i < menuButtons.size(); i++) {
                if (menuButtons[i].contains(mousePos)) {
                    handleMenuSelection(i);
                }
            }
        }
    }

    void handleMenuSelection(int index) {
        switch (index) {
            case 0: // Português
                startGame("portugues.txt");
                break;
            case 1: // Inglês
                startGame("ingles.txt");
                break;
            case 2: // Ajuda
                currentState = HELP;
                break;
            case 3: // Placar
                loadLeaderboard();
                currentState = LEADERBOARD;
                break;
            case 4: // Sair
                window.close();
                break;
        }
    }

    void handleTextInput(const sf::Event& event) {
        if (event.text.unicode < 128) {
            if (event.text.unicode == '\b' && !playerInput.empty()) {
                playerInput.pop_back();
            }
            else if (event.text.unicode == '\r' || event.text.unicode == '\n') {
                checkWord();
            }
            else if (std::isalpha(event.text.unicode)) {
                playerInput += static_cast<char>(std::toupper(event.text.unicode));
            }
        }
    }

    void startGame(const std::string& dictionaryFile) {
        LiberaFila(&dicionario);
        loadDictionary(dictionaryFile);
        currentState = PLAYING;
        score = 0;
        timeRemaining = 60.f;
        playerInput.clear();
        showFeedback = false;
        scrambleWord();
    }

    void checkWord() {
        if (playerInput == currentWord) {
            score += 100;
            showFeedbackMessage("CORRETO! +100 pontos", sf::Color::Green);
            scrambleWord();
            timeRemaining = 60.f;
        } else {
            if (score >= 25) {
                score -= 25;
                showFeedbackMessage("ERRADO! -25 pontos", sf::Color::Red);
            } else {
                showFeedbackMessage("ERRADO!", sf::Color::Red);
            }
        }
        playerInput.clear();
    }

    void update(float dt) {
        if (currentState == PLAYING) {
            timeRemaining -= dt;
            if (timeRemaining <= 0) {
                currentState = GAME_OVER;
                saveScore();
                loadLeaderboard();
            }

            float timeBarWidth = (timeRemaining / 60.f) * 700.f;
            timeBar.setSize(sf::Vector2f(timeBarWidth, 20));

            if (showFeedback && feedbackTimer.getElapsedTime().asSeconds() > 2.0f) {
                showFeedback = false;
            }
        }
    }

    void render() {
        window.clear(sf::Color(50, 50, 50));

        switch (currentState) {
            case MENU:
                renderMenu();
                break;
            case PLAYING:
                renderGame();
                break;
            case HELP:
                renderHelp();
                break;
            case LEADERBOARD:
                renderLeaderboard();
                break;
            case GAME_OVER:
                renderGameOver();
                break;
        }

        window.display();
    }

    void renderMenu() {
        for (auto& button : menuButtons) {
            button.draw(window);
        }
    }

    void renderGame() {
        window.draw(timeBar);

        scoreText.setString("Pontuacao: " + std::to_string(score));
        window.draw(scoreText);

        timeText.setString("Tempo: " + std::to_string(static_cast<int>(timeRemaining)));
        window.draw(timeText);

        scrambledWordText.setString(scrambledWord);
        window.draw(scrambledWordText);

        inputText.setString(playerInput);
        window.draw(inputText);

        window.draw(escapeText);if (showFeedback) {
            feedbackText.setString(feedbackMessage);
            window.draw(feedbackText);
        }
    }

    void renderHelp() {
        sf::Text helpText;
        helpText.setFont(font);
        helpText.setCharacterSize(24);
        helpText.setFillColor(sf::Color::White);
        helpText.setPosition(50, 50);

        std::string helpString =
            "Como Jogar:\n\n"
            "1. Digite a palavra correta baseada nas letras embaralhadas\n"
            "2. Acerte para ganhar 100 pontos\n"
            "3. Erro custa 25 pontos\n"
            "4. Voce tem 60 segundos para cada palavra\n"
            "5. O jogo termina quando o tempo acabar\n\n"
            "Pressione ESC para voltar ao menu";

        helpText.setString(helpString);
        window.draw(helpText);
    }

    void renderLeaderboard() {
        sf::Text title;
        title.setFont(font);
        title.setString("Melhores Pontuacoes");
        title.setCharacterSize(32);
        title.setFillColor(sf::Color::Yellow);
        title.setPosition(250, 50);
        window.draw(title);

        float yPos = 150;
        for (size_t i = 0; i < std::min(size_t(10), leaderboard.size()); i++) {
            sf::Text entry;
            entry.setFont(font);
            entry.setCharacterSize(24);
            entry.setFillColor(sf::Color::White);
            entry.setPosition(250, yPos);

            std::stringstream ss;
            ss << (i + 1) << ". " << leaderboard[i].name << ": " << leaderboard[i].score;
            entry.setString(ss.str());

            window.draw(entry);
            yPos += 40;
        }

        window.draw(escapeText);
    }

    void renderGameOver() {
        sf::Text gameOverText;
        gameOverText.setFont(font);
        gameOverText.setCharacterSize(48);
        gameOverText.setFillColor(sf::Color::Red);
        gameOverText.setString("Fim de Jogo!");
        gameOverText.setPosition(
            (800 - gameOverText.getGlobalBounds().width) / 2,
            200
        );

        sf::Text finalScore;
        finalScore.setFont(font);
        finalScore.setCharacterSize(32);
        finalScore.setFillColor(sf::Color::White);
        finalScore.setString("Pontuacao Final: " + std::to_string(score));
        finalScore.setPosition(
            (800 - finalScore.getGlobalBounds().width) / 2,
            300
        );

        window.draw(gameOverText);
        window.draw(finalScore);
        window.draw(escapeText);
    }
};

int main() {
    TwistedGame game;
    game.run();
    return 0;
}
